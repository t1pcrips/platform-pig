// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i platform-pkg/pkg/database.TxManeger -o tx_maneger_minimock.go -n TxManegerMock -p mocks

import (
	"context"
	mm_database "platform-pkg/pkg/database"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TxManegerMock implements mm_database.TxManeger
type TxManegerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcReadCommitted          func(ctx context.Context, f mm_database.Handler) (err error)
	funcReadCommittedOrigin    string
	inspectFuncReadCommitted   func(ctx context.Context, f mm_database.Handler)
	afterReadCommittedCounter  uint64
	beforeReadCommittedCounter uint64
	ReadCommittedMock          mTxManegerMockReadCommitted
}

// NewTxManegerMock returns a mock for mm_database.TxManeger
func NewTxManegerMock(t minimock.Tester) *TxManegerMock {
	m := &TxManegerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ReadCommittedMock = mTxManegerMockReadCommitted{mock: m}
	m.ReadCommittedMock.callArgs = []*TxManegerMockReadCommittedParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTxManegerMockReadCommitted struct {
	optional           bool
	mock               *TxManegerMock
	defaultExpectation *TxManegerMockReadCommittedExpectation
	expectations       []*TxManegerMockReadCommittedExpectation

	callArgs []*TxManegerMockReadCommittedParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TxManegerMockReadCommittedExpectation specifies expectation struct of the TxManeger.ReadCommitted
type TxManegerMockReadCommittedExpectation struct {
	mock               *TxManegerMock
	params             *TxManegerMockReadCommittedParams
	paramPtrs          *TxManegerMockReadCommittedParamPtrs
	expectationOrigins TxManegerMockReadCommittedExpectationOrigins
	results            *TxManegerMockReadCommittedResults
	returnOrigin       string
	Counter            uint64
}

// TxManegerMockReadCommittedParams contains parameters of the TxManeger.ReadCommitted
type TxManegerMockReadCommittedParams struct {
	ctx context.Context
	f   mm_database.Handler
}

// TxManegerMockReadCommittedParamPtrs contains pointers to parameters of the TxManeger.ReadCommitted
type TxManegerMockReadCommittedParamPtrs struct {
	ctx *context.Context
	f   *mm_database.Handler
}

// TxManegerMockReadCommittedResults contains results of the TxManeger.ReadCommitted
type TxManegerMockReadCommittedResults struct {
	err error
}

// TxManegerMockReadCommittedOrigins contains origins of expectations of the TxManeger.ReadCommitted
type TxManegerMockReadCommittedExpectationOrigins struct {
	origin    string
	originCtx string
	originF   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReadCommitted *mTxManegerMockReadCommitted) Optional() *mTxManegerMockReadCommitted {
	mmReadCommitted.optional = true
	return mmReadCommitted
}

// Expect sets up expected params for TxManeger.ReadCommitted
func (mmReadCommitted *mTxManegerMockReadCommitted) Expect(ctx context.Context, f mm_database.Handler) *mTxManegerMockReadCommitted {
	if mmReadCommitted.mock.funcReadCommitted != nil {
		mmReadCommitted.mock.t.Fatalf("TxManegerMock.ReadCommitted mock is already set by Set")
	}

	if mmReadCommitted.defaultExpectation == nil {
		mmReadCommitted.defaultExpectation = &TxManegerMockReadCommittedExpectation{}
	}

	if mmReadCommitted.defaultExpectation.paramPtrs != nil {
		mmReadCommitted.mock.t.Fatalf("TxManegerMock.ReadCommitted mock is already set by ExpectParams functions")
	}

	mmReadCommitted.defaultExpectation.params = &TxManegerMockReadCommittedParams{ctx, f}
	mmReadCommitted.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmReadCommitted.expectations {
		if minimock.Equal(e.params, mmReadCommitted.defaultExpectation.params) {
			mmReadCommitted.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReadCommitted.defaultExpectation.params)
		}
	}

	return mmReadCommitted
}

// ExpectCtxParam1 sets up expected param ctx for TxManeger.ReadCommitted
func (mmReadCommitted *mTxManegerMockReadCommitted) ExpectCtxParam1(ctx context.Context) *mTxManegerMockReadCommitted {
	if mmReadCommitted.mock.funcReadCommitted != nil {
		mmReadCommitted.mock.t.Fatalf("TxManegerMock.ReadCommitted mock is already set by Set")
	}

	if mmReadCommitted.defaultExpectation == nil {
		mmReadCommitted.defaultExpectation = &TxManegerMockReadCommittedExpectation{}
	}

	if mmReadCommitted.defaultExpectation.params != nil {
		mmReadCommitted.mock.t.Fatalf("TxManegerMock.ReadCommitted mock is already set by Expect")
	}

	if mmReadCommitted.defaultExpectation.paramPtrs == nil {
		mmReadCommitted.defaultExpectation.paramPtrs = &TxManegerMockReadCommittedParamPtrs{}
	}
	mmReadCommitted.defaultExpectation.paramPtrs.ctx = &ctx
	mmReadCommitted.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmReadCommitted
}

// ExpectFParam2 sets up expected param f for TxManeger.ReadCommitted
func (mmReadCommitted *mTxManegerMockReadCommitted) ExpectFParam2(f mm_database.Handler) *mTxManegerMockReadCommitted {
	if mmReadCommitted.mock.funcReadCommitted != nil {
		mmReadCommitted.mock.t.Fatalf("TxManegerMock.ReadCommitted mock is already set by Set")
	}

	if mmReadCommitted.defaultExpectation == nil {
		mmReadCommitted.defaultExpectation = &TxManegerMockReadCommittedExpectation{}
	}

	if mmReadCommitted.defaultExpectation.params != nil {
		mmReadCommitted.mock.t.Fatalf("TxManegerMock.ReadCommitted mock is already set by Expect")
	}

	if mmReadCommitted.defaultExpectation.paramPtrs == nil {
		mmReadCommitted.defaultExpectation.paramPtrs = &TxManegerMockReadCommittedParamPtrs{}
	}
	mmReadCommitted.defaultExpectation.paramPtrs.f = &f
	mmReadCommitted.defaultExpectation.expectationOrigins.originF = minimock.CallerInfo(1)

	return mmReadCommitted
}

// Inspect accepts an inspector function that has same arguments as the TxManeger.ReadCommitted
func (mmReadCommitted *mTxManegerMockReadCommitted) Inspect(f func(ctx context.Context, f mm_database.Handler)) *mTxManegerMockReadCommitted {
	if mmReadCommitted.mock.inspectFuncReadCommitted != nil {
		mmReadCommitted.mock.t.Fatalf("Inspect function is already set for TxManegerMock.ReadCommitted")
	}

	mmReadCommitted.mock.inspectFuncReadCommitted = f

	return mmReadCommitted
}

// Return sets up results that will be returned by TxManeger.ReadCommitted
func (mmReadCommitted *mTxManegerMockReadCommitted) Return(err error) *TxManegerMock {
	if mmReadCommitted.mock.funcReadCommitted != nil {
		mmReadCommitted.mock.t.Fatalf("TxManegerMock.ReadCommitted mock is already set by Set")
	}

	if mmReadCommitted.defaultExpectation == nil {
		mmReadCommitted.defaultExpectation = &TxManegerMockReadCommittedExpectation{mock: mmReadCommitted.mock}
	}
	mmReadCommitted.defaultExpectation.results = &TxManegerMockReadCommittedResults{err}
	mmReadCommitted.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmReadCommitted.mock
}

// Set uses given function f to mock the TxManeger.ReadCommitted method
func (mmReadCommitted *mTxManegerMockReadCommitted) Set(f func(ctx context.Context, f mm_database.Handler) (err error)) *TxManegerMock {
	if mmReadCommitted.defaultExpectation != nil {
		mmReadCommitted.mock.t.Fatalf("Default expectation is already set for the TxManeger.ReadCommitted method")
	}

	if len(mmReadCommitted.expectations) > 0 {
		mmReadCommitted.mock.t.Fatalf("Some expectations are already set for the TxManeger.ReadCommitted method")
	}

	mmReadCommitted.mock.funcReadCommitted = f
	mmReadCommitted.mock.funcReadCommittedOrigin = minimock.CallerInfo(1)
	return mmReadCommitted.mock
}

// When sets expectation for the TxManeger.ReadCommitted which will trigger the result defined by the following
// Then helper
func (mmReadCommitted *mTxManegerMockReadCommitted) When(ctx context.Context, f mm_database.Handler) *TxManegerMockReadCommittedExpectation {
	if mmReadCommitted.mock.funcReadCommitted != nil {
		mmReadCommitted.mock.t.Fatalf("TxManegerMock.ReadCommitted mock is already set by Set")
	}

	expectation := &TxManegerMockReadCommittedExpectation{
		mock:               mmReadCommitted.mock,
		params:             &TxManegerMockReadCommittedParams{ctx, f},
		expectationOrigins: TxManegerMockReadCommittedExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmReadCommitted.expectations = append(mmReadCommitted.expectations, expectation)
	return expectation
}

// Then sets up TxManeger.ReadCommitted return parameters for the expectation previously defined by the When method
func (e *TxManegerMockReadCommittedExpectation) Then(err error) *TxManegerMock {
	e.results = &TxManegerMockReadCommittedResults{err}
	return e.mock
}

// Times sets number of times TxManeger.ReadCommitted should be invoked
func (mmReadCommitted *mTxManegerMockReadCommitted) Times(n uint64) *mTxManegerMockReadCommitted {
	if n == 0 {
		mmReadCommitted.mock.t.Fatalf("Times of TxManegerMock.ReadCommitted mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReadCommitted.expectedInvocations, n)
	mmReadCommitted.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmReadCommitted
}

func (mmReadCommitted *mTxManegerMockReadCommitted) invocationsDone() bool {
	if len(mmReadCommitted.expectations) == 0 && mmReadCommitted.defaultExpectation == nil && mmReadCommitted.mock.funcReadCommitted == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReadCommitted.mock.afterReadCommittedCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReadCommitted.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReadCommitted implements mm_database.TxManeger
func (mmReadCommitted *TxManegerMock) ReadCommitted(ctx context.Context, f mm_database.Handler) (err error) {
	mm_atomic.AddUint64(&mmReadCommitted.beforeReadCommittedCounter, 1)
	defer mm_atomic.AddUint64(&mmReadCommitted.afterReadCommittedCounter, 1)

	mmReadCommitted.t.Helper()

	if mmReadCommitted.inspectFuncReadCommitted != nil {
		mmReadCommitted.inspectFuncReadCommitted(ctx, f)
	}

	mm_params := TxManegerMockReadCommittedParams{ctx, f}

	// Record call args
	mmReadCommitted.ReadCommittedMock.mutex.Lock()
	mmReadCommitted.ReadCommittedMock.callArgs = append(mmReadCommitted.ReadCommittedMock.callArgs, &mm_params)
	mmReadCommitted.ReadCommittedMock.mutex.Unlock()

	for _, e := range mmReadCommitted.ReadCommittedMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReadCommitted.ReadCommittedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReadCommitted.ReadCommittedMock.defaultExpectation.Counter, 1)
		mm_want := mmReadCommitted.ReadCommittedMock.defaultExpectation.params
		mm_want_ptrs := mmReadCommitted.ReadCommittedMock.defaultExpectation.paramPtrs

		mm_got := TxManegerMockReadCommittedParams{ctx, f}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReadCommitted.t.Errorf("TxManegerMock.ReadCommitted got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReadCommitted.ReadCommittedMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.f != nil && !minimock.Equal(*mm_want_ptrs.f, mm_got.f) {
				mmReadCommitted.t.Errorf("TxManegerMock.ReadCommitted got unexpected parameter f, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReadCommitted.ReadCommittedMock.defaultExpectation.expectationOrigins.originF, *mm_want_ptrs.f, mm_got.f, minimock.Diff(*mm_want_ptrs.f, mm_got.f))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReadCommitted.t.Errorf("TxManegerMock.ReadCommitted got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmReadCommitted.ReadCommittedMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReadCommitted.ReadCommittedMock.defaultExpectation.results
		if mm_results == nil {
			mmReadCommitted.t.Fatal("No results are set for the TxManegerMock.ReadCommitted")
		}
		return (*mm_results).err
	}
	if mmReadCommitted.funcReadCommitted != nil {
		return mmReadCommitted.funcReadCommitted(ctx, f)
	}
	mmReadCommitted.t.Fatalf("Unexpected call to TxManegerMock.ReadCommitted. %v %v", ctx, f)
	return
}

// ReadCommittedAfterCounter returns a count of finished TxManegerMock.ReadCommitted invocations
func (mmReadCommitted *TxManegerMock) ReadCommittedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadCommitted.afterReadCommittedCounter)
}

// ReadCommittedBeforeCounter returns a count of TxManegerMock.ReadCommitted invocations
func (mmReadCommitted *TxManegerMock) ReadCommittedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadCommitted.beforeReadCommittedCounter)
}

// Calls returns a list of arguments used in each call to TxManegerMock.ReadCommitted.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReadCommitted *mTxManegerMockReadCommitted) Calls() []*TxManegerMockReadCommittedParams {
	mmReadCommitted.mutex.RLock()

	argCopy := make([]*TxManegerMockReadCommittedParams, len(mmReadCommitted.callArgs))
	copy(argCopy, mmReadCommitted.callArgs)

	mmReadCommitted.mutex.RUnlock()

	return argCopy
}

// MinimockReadCommittedDone returns true if the count of the ReadCommitted invocations corresponds
// the number of defined expectations
func (m *TxManegerMock) MinimockReadCommittedDone() bool {
	if m.ReadCommittedMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReadCommittedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReadCommittedMock.invocationsDone()
}

// MinimockReadCommittedInspect logs each unmet expectation
func (m *TxManegerMock) MinimockReadCommittedInspect() {
	for _, e := range m.ReadCommittedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TxManegerMock.ReadCommitted at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterReadCommittedCounter := mm_atomic.LoadUint64(&m.afterReadCommittedCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReadCommittedMock.defaultExpectation != nil && afterReadCommittedCounter < 1 {
		if m.ReadCommittedMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TxManegerMock.ReadCommitted at\n%s", m.ReadCommittedMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TxManegerMock.ReadCommitted at\n%s with params: %#v", m.ReadCommittedMock.defaultExpectation.expectationOrigins.origin, *m.ReadCommittedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReadCommitted != nil && afterReadCommittedCounter < 1 {
		m.t.Errorf("Expected call to TxManegerMock.ReadCommitted at\n%s", m.funcReadCommittedOrigin)
	}

	if !m.ReadCommittedMock.invocationsDone() && afterReadCommittedCounter > 0 {
		m.t.Errorf("Expected %d calls to TxManegerMock.ReadCommitted at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ReadCommittedMock.expectedInvocations), m.ReadCommittedMock.expectedInvocationsOrigin, afterReadCommittedCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TxManegerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockReadCommittedInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TxManegerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TxManegerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockReadCommittedDone()
}
